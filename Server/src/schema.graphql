type Query {
  info: String!
  feed (filter : String, skip : Int, first : Int, orderBy : LinkOrderbyInput): [Link!]!
  link(id : String!) : Link
  members: [Member]
  member (id : ID!) : Member
  posts: [Post!]!
  post(id : ID!) : Post
  users:[User!]!

}
type Mutation {
   post(url : String!, description : String!) : Link!
  ## updateLink (id : String!, url : String!, description : String!) : Link
  signup(email : String!, password : String!, name: String!) : AuthPayload
  login(email : String!, password : String!) : AuthPayload
  vote(linkId : ID!) : Vote
}

type AuthPayload {
    token : String
    user : User
}
type User {
    id : ID!
    name : String!
    email : String!
    links : [Link!]!
}
type Link {
    id : ID!
    description : String!
    url : String!
    postedBy : User
    votes : [Vote!]!
}

type Subscription {
    newLink : Link
    newVote : Vote
}

type Vote {
    id : ID!
    link : Link!
    user : User!
}

type Member {
    id : ID!
    name: String!
    posts: [Post!]!
}

type Post {
    id : ID!
    title: String!
    content: String!
    published: Boolean!
    author: Member!

}
enum LinkOrderbyInput {
    description_ASC
    description_DESC
    url_ASC
    url_DESC
    createdAt_ASC
    createdAt_DESC
}
